<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Twinsanity</name>
    </assembly>
    <members>
        <member name="T:Twinsanity.ADPCM">
            <summary>
            Represents Adaptive Differential Pulse-Code Modulation
            </summary>
        </member>
        <member name="M:Twinsanity.ADPCM.ADPCM_Demux(System.IO.MemoryStream,System.IO.MemoryStream@,System.IO.MemoryStream@,System.UInt32)">
            <summary>
            Demultiplexing given ADPCM file into the right and left audios
            </summary>
            <param name="ADPCM">Original ADPCM represented as a stream in RAM</param>
            <param name="ADPCM_R">Right ADPCM that will be returned</param>
            <param name="ADPCM_L">Left ADPCM that will be returned</param>
            <param name="Interleave">Determines how mixed up together left and right will be in the result</param>
        </member>
        <member name="M:Twinsanity.ADPCM.ADPCM_Mux(System.IO.MemoryStream@,System.IO.MemoryStream,System.IO.MemoryStream,System.UInt32)">
            <summary>
            Multiplexing left and right ADPCM into single ADPCM file
            </summary>
            <param name="ADPCM">ADPCM file to get as a result</param>
            <param name="ADPCM_R">Right ADPCM represented as a stream in RAM</param>
            <param name="ADPCM_L">Left ADPCM represented as a stream in RAM</param>
            <param name="Interleave">Determines how mixed up the left and right of original ADPCM are</param>
        </member>
        <member name="M:Twinsanity.ADPCM.PCM_Demux(System.IO.MemoryStream,System.IO.MemoryStream@,System.IO.MemoryStream@)">
            <summary>
            Demultiplexing given PCM into left and right PCMs
            </summary>
            <param name="PCM">PCM file represented as a stream in RAM</param>
            <param name="PCM_R">Right PCM to get as a result</param>
            <param name="PCM_L">Left PCM to get as a result</param>
        </member>
        <member name="M:Twinsanity.ADPCM.PCM_Mux(System.IO.MemoryStream@,System.IO.MemoryStream,System.IO.MemoryStream)">
            <summary>
            Multiplexing given left and right PCMs into a single one
            </summary>
            <param name="PCM">PCM to receive as a result</param>
            <param name="PCM_R">Right PCM represented as a stream in RAM</param>
            <param name="PCM_L">Left PCM represented as a stream in RAM</param>
        </member>
        <member name="M:Twinsanity.ADPCM.ADPCM2PCM(System.IO.MemoryStream,System.IO.MemoryStream@)">
            <summary>
            Convert ADPCM to PCM
            </summary>
            <param name="ADPCM">ADPCM file to convert represented as a stream in RAM</param>
            <param name="Wav">WAV file to get as a result represented as a stream in RAM</param>
        </member>
        <member name="M:Twinsanity.ADPCM.PCM2ADPCM(System.IO.MemoryStream@,System.IO.MemoryStream)">
            <summary>
            Convert PCM to ADPCM
            </summary>
            <param name="ADPCM">ADPCM to get as a result</param>
            <param name="PCM">PCM file to convert represented as a stream in RAM</param>
        </member>
        <member name="M:Twinsanity.ADPCM.Twin2WAV(System.IO.MemoryStream,System.IO.MemoryStream@,System.UInt32,System.Int16)">
            <summary>
            Converts Twinsanity's sound to WAV sound format
            </summary>
            <param name="ADPCM">ADPCM file represented as a stream in RAM</param>
            <param name="Wav">WAV file to save the sound into represented as a stream in RAM</param>
            <param name="Frequency">Frequence of the sound</param>
            <param name="Chan">Channel number of the sound, default is 1</param>
        </member>
        <member name="M:Twinsanity.ADPCM.WAV2Twin(System.IO.MemoryStream,System.IO.MemoryStream@)">
            <summary>
            Converts WAV sound to Twinsanity's sound format
            </summary>
            <param name="Wav">WAV file represented as a stream in RAM</param>
            <param name="ADPCM">ADPCM file represented as a stream in RAM</param>
        </member>
        <member name="T:Twinsanity.BDArchive">
            <summary>
            BD/BH archive class
            </summary>
        </member>
        <member name="T:Twinsanity.BDArchive.File">
            <summary>
            Simple structure of a file
            </summary>
        </member>
        <member name="M:Twinsanity.BDArchive.LoadTable(System.String,System.String)">
            <summary>
            Load the BH archive
            </summary>
            <param name="Path">Path to the archive</param>
            <param name="Name">Name of the archive</param>
        </member>
        <member name="M:Twinsanity.BDArchive.LoadArchive(System.String,System.String)">
            <summary>
            Load the BD archive
            </summary>
            <param name="Path">Path to the archive</param>
            <param name="Name">Name of the archive</param>
        </member>
        <member name="M:Twinsanity.BDArchive.CreateTable(System.String)">
            <summary>
            Create a table to save the archives at
            </summary>
            <param name="Path">Path of the table to be created at</param>
        </member>
        <member name="M:Twinsanity.BDArchive.SaveTable(System.String,System.String)">
            <summary>
            Save the BH archive
            </summary>
            <param name="Path">Path of saving</param>
            <param name="Name">Name of the archive</param>
        </member>
        <member name="M:Twinsanity.BDArchive.SaveArchive(System.String,System.String)">
            <summary>
            Save the BD archive
            </summary>
            <param name="Path">Path of saving</param>
            <param name="Name">Name of the archive</param>
        </member>
        <member name="M:Twinsanity.BDArchive.Extract(System.String)">
            <summary>
            Extract the archives
            </summary>
            <param name="Path">Path to extract to</param>
        </member>
        <member name="M:Twinsanity.BDArchive.Dispose">
            <summary>
            Realse the resources being used by the object
            </summary>
        </member>
        <member name="M:Twinsanity.BDArchive.ExtractOnce(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Path1"></param>
            <param name="Path2"></param>
            <param name="Name"></param>
        </member>
        <member name="M:Twinsanity.BDArchive.FormatPath(System.String)">
            <summary>
            Formats the path to normalize it
            </summary>
            <param name="Path">Path to format</param>
            <returns>Formatted path suitable for usage</returns>
        </member>
        <member name="M:Twinsanity.GeoData.UpdateStream">
            <summary>
            Update the object's memory stream with new data
            </summary>
        </member>
        <member name="T:Twinsanity.MetaData">
            <summary>
            Contains information about the library
            </summary>
        </member>
        <member name="F:Twinsanity.MetaData.Version">
            <summary>
            Version of the library
            </summary>
        </member>
        <member name="F:Twinsanity.MetaData.Author">
            <summary>
            Author information
            </summary>
        </member>
        <member name="F:Twinsanity.MetaData.Name">
            <summary>
            Name of DLL
            </summary>
        </member>
        <member name="T:Twinsanity.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._128x128">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._128x128mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._128x256">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._128x32mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._128x64mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._16x16mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._32x16mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._32x32mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._32x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._32x64mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._32x8">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._64x32mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._64x64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Twinsanity.Properties.Resources._64x64mip">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Twinsanity.PSM">
            <summary>
            Represents Twinsanity's image file format
            </summary>
        </member>
        <member name="T:Twinsanity.PSM.PSM_Segment">
            <summary>
            Structure of a given PSM segment
            </summary>
        </member>
        <member name="F:Twinsanity.PSM.PSM_Segments">
            <summary>
            Array of PSM segments in the PSM image
            </summary>
        </member>
        <member name="M:Twinsanity.PSM.LoadPSM(System.String,System.Boolean)">
            <summary>
            Load the PSM image
            </summary>
            <param name="Path">Path to the image</param>
            <param name="Demo">Flag to check for demo</param>
        </member>
        <member name="M:Twinsanity.PSM.SavePSM(System.String)">
            <summary>
            Save the PSM
            </summary>
            <param name="Path">Path to save at</param>
        </member>
        <member name="M:Twinsanity.PSM.ReplacePSMSegment(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Replace given PSM segment
            </summary>
            <param name="Image">Given PSM segment</param>
            <param name="index">Index of the segment in the full image</param>
            <returns>Whether replacement was successful or not</returns>
        </member>
        <member name="M:Twinsanity.PSM.LoadPTC(System.String,System.Boolean)">
            <summary>
            Load the PTC file
            </summary>
            <param name="Path">Path to load from</param>
            <param name="Demo">Flag to check for demo</param>
        </member>
        <member name="M:Twinsanity.PSM.SavePTC(System.String)">
            <summary>
            Save PTC file
            </summary>
            <param name="Path">Path to save at</param>
        </member>
        <member name="M:Twinsanity.PSM.LoadPSF(System.String,System.Boolean)">
            <summary>
            Load the PSF file
            </summary>
            <param name="Path">Path to load from</param>
            <param name="Demo">Flag to check for demo</param>
        </member>
        <member name="M:Twinsanity.PSM.SavePSF(System.String,System.Boolean)">
            <summary>
            Save the PSF file
            </summary>
            <param name="Path">Path to save at</param>
            <param name="Demo">Flag to check for demo</param>
        </member>
        <member name="T:Twinsanity.BaseSection">
            <summary>
            Represents an unknown section in the chunk tree
            </summary>
        </member>
        <member name="T:Twinsanity.BaseItem">
            <summary>
            Represents an Unknown Item in the chunk tree
            </summary>
        </member>
        <member name="F:Twinsanity.BaseItem.NodeName">
            <summary>
            Name of the node in the chunk tree
            </summary>
        </member>
        <member name="F:Twinsanity.BaseItem.ByteStream">
            <summary>
            ByteStream used to read the information about the object
            </summary>
        </member>
        <member name="M:Twinsanity.BaseItem.Load(System.IO.FileStream@,System.IO.BinaryReader@)">
            <summary>
            Load the item into the RAM
            </summary>
            <param name="File">File to load from</param>
            <param name="Reader">Reader to read from the file</param>
        </member>
        <member name="M:Twinsanity.BaseItem.Recalculate">
            <summary>
            Recalculate the size
            </summary>
            <returns>New size</returns>
        </member>
        <member name="M:Twinsanity.BaseItem.UpdateStream">
            <summary>
            Update the memory stream of the object
            </summary>
        </member>
        <member name="M:Twinsanity.BaseItem.Get_Stream(System.Int32,System.Int32[])">
            <summary>
            Get the current memory stream
            </summary>
            <param name="indexes">NO NEED RIGHT NOW</param>
            <param name="pos">NO NEED RIGHT NOW</param>
            <returns>Current stream in use by the object</returns>
        </member>
        <member name="M:Twinsanity.BaseItem.Put_Stream(System.IO.MemoryStream,System.Int32,System.Int32[])">
            <summary>
            Use new stream for the object
            </summary>
            <param name="indexes">NO NEED RIGHT NOW</param>
            <param name="pos">NO NEED RIGHT NOW</param>
            <param name="It">New stream to use</param>
        </member>
        <member name="M:Twinsanity.BaseItem.Save(System.IO.FileStream@,System.IO.BinaryWriter@)">
            <summary>
            Save into a file stream
            </summary>
            <param name="File">Stream to save at</param>
            <param name="Writer">Writer to write with</param>
        </member>
        <member name="M:Twinsanity.BaseItem.DataUpdate">
            <summary>
            Should be implemented by the children.
            Update the object with newly written data.
            </summary>
        </member>
        <member name="T:Twinsanity.BaseObject">
            <summary>
            Interface of the base object
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject.ID">
            <summary>
            ID of the object
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject.Size">
            <summary>
            Size of the object in bytes in the chunk
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject.Offset">
            <summary>
            Offset in bytes from the start of chunk's file
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject.Base">
            <summary>
            
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject.Records">
            <summary>
            
            </summary>
        </member>
        <member name="F:Twinsanity.BaseObject._Item">
            <summary>
            Children
            </summary>
        </member>
        <member name="M:Twinsanity.BaseObject.Recalculate">
            <summary>
            Recalcuate new size of the object after changing values
            </summary>
            <returns>New size of the object</returns>
        </member>
        <member name="M:Twinsanity.BaseObject.Load(System.IO.FileStream@,System.IO.BinaryReader@)">
            <summary>
            Load the object into the stream
            </summary>
            <param name="File">Stream to load from</param>
            <param name="Reader">Reader to use</param>
        </member>
        <member name="M:Twinsanity.BaseObject.Get_Item(System.Int32,System.Int32[])">
            <summary>
            Get the item in the tree
            </summary>
            <param name="pos">Position in the tree</param>
            <param name="indexes">Depth in the tree</param>
            <returns></returns>
        </member>
        <member name="M:Twinsanity.BaseObject.Put_Item(Twinsanity.BaseObject,System.Int32,System.Int32[])">
            <summary>
            Put the item in the tree
            </summary>
            <param name="It">Object to put</param>
            <param name="pos">Position to put at</param>
            <param name="indexes">Depth in the tree</param>
        </member>
        <member name="M:Twinsanity.BaseObject.Get_Stream(System.Int32,System.Int32[])">
            <summary>
            Get the memory stream of the object
            </summary>
            <param name="pos">Position in the tree</param>
            <param name="indexes">Depth in the tree</param>
            <returns></returns>
        </member>
        <member name="M:Twinsanity.BaseObject.Put_Stream(System.IO.MemoryStream,System.Int32,System.Int32[])">
            <summary>
            New memory stream to use
            </summary>
            <param name="It">Stream to use</param>
            <param name="pos">Position in the tree</param>
            <param name="indexes">Depth in the tree</param>
        </member>
        <member name="M:Twinsanity.BaseObject.UpdateStream">
            <summary>
            Update the memory stream of the object
            </summary>
        </member>
        <member name="M:Twinsanity.BaseObject.Add_Item(System.Int32,System.Int32[])">
            <summary>
            Add new item as a child
            </summary>
            <param name="pos">Position in the tree</param>
            <param name="indexes">Depth in the tree</param>
        </member>
        <member name="M:Twinsanity.BaseObject.Delete_Item(System.Int32,System.Int32[])">
            <summary>
            Delete the item including its children
            </summary>
            <param name="pos">Position in the tree</param>
            <param name="indexes">Depth in the tree</param>
        </member>
        <member name="M:Twinsanity.BaseObject.Save(System.IO.FileStream@,System.IO.BinaryWriter@)">
            <summary>
            Save the object into a file
            </summary>
            <param name="File">File to save to</param>
            <param name="Writer">Writer to use</param>
        </member>
        <member name="P:Twinsanity.BaseObject.Item(System.Int32)">
            <summary>
            Overrides array operator[]
            </summary>
            <param name="key">Index of array to access</param>
            <returns>BaseObject in the _Item[] array</returns>
        </member>
        <member name="M:Twinsanity.BaseObject.Load``1(System.IO.FileStream@,System.IO.BinaryReader@)">
            <summary>
            Load the specified T object
            </summary>
            <typeparam name="T">Object to load</typeparam>
            <param name="File">File to load from</param>
            <param name="Reader">Reader to use</param>
        </member>
        <member name="T:Twinsanity.RM2">
            <summary>
            Represents Twinsanity's chunk
            </summary>
        </member>
        <member name="M:Twinsanity.RM2.Recalculate">
            <summary>
            Recalculate size of the chunk
            </summary>
        </member>
        <member name="M:Twinsanity.RM2.LoadRM2(System.String)">
            <summary>
            Load the RM2 chunk
            </summary>
            <param name="Path">Path to load from</param>
        </member>
        <member name="M:Twinsanity.RM2.LoadDemoRM2(System.String)">
            <summary>
            Load Demo version of RM2 chunk
            </summary>
            <param name="Path">Path to load from</param>
        </member>
        <member name="M:Twinsanity.RM2.LoadSM2(System.String)">
            <summary>
            Load the SM2 chunk
            </summary>
            <param name="Path">Path to load from</param>
        </member>
        <member name="M:Twinsanity.RM2.NewRM2">
            <summary>
            Create new RM2 chunk
            </summary>
        </member>
        <member name="M:Twinsanity.RM2.NewSM2(System.String)">
            <summary>
            New SM2 Chunk
            </summary>
            <param name="Name">Name of the chunk</param>
        </member>
        <member name="M:Twinsanity.RM2.Save(System.String)">
            <summary>
            Save the chunk
            </summary>
            <param name="Path">Path to save at</param>
        </member>
        <member name="M:Twinsanity.RM2.Get_Item(System.Int32[])">
            <summary>
            Get the item in the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
            <returns>Found object in the tree</returns>
        </member>
        <member name="M:Twinsanity.RM2.Put_Item(Twinsanity.BaseObject,System.Int32[])">
            <summary>
            Put new item into the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
            <param name="It">Item to put in</param>
        </member>
        <member name="M:Twinsanity.RM2.Get_Stream(System.Int32[])">
            <summary>
            Get the RAM stream from the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
            <returns>Found RAM stream in the tree</returns>
        </member>
        <member name="M:Twinsanity.RM2.Put_Stream(System.IO.MemoryStream,System.Int32[])">
            <summary>
            Put new RAM stream into the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
            <param name="It">The stream to put</param>
        </member>
        <member name="M:Twinsanity.RM2.Add_Item(System.Int32[])">
            <summary>
            Add item to the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
        </member>
        <member name="M:Twinsanity.RM2.Delete_Item(System.Int32[])">
            <summary>
            Delete item from the chunk tree
            </summary>
            <param name="indexes">Array of indexes</param>
        </member>
        <member name="T:Twinsanity.RM2.Coordinate4">
            <summary>
            Represents a simple 4D coordinate
            </summary>
        </member>
        <member name="T:Twinsanity.Texture">
            <summary>
            Represents Twinsanity's Texture
            </summary>
        </member>
    </members>
</doc>
